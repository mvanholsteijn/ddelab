{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName", 
	"Default": "stackato",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "SSLCertificateId" : {
      "Description" : "SSL Certificate Id to be used for SSL traffic",
      "Type" : "String"
    },
    "NatInstanceType" : {
      "Description" : "Instance type of NAT hosts",
      "Type" : "String",
      "Default" : "t2.micro"
    },
    "BastionInstanceType" : {
      "Description" : "Instance type of Bastion hosts",
      "Type" : "String",
      "Default" : "t2.micro"
    },
    "StackatoInstanceType" : {
      "Description" : "Instance type of Stackato hosts",
      "Type" : "String",
      "Default" : "m3.medium"
    }
  },

  "Mappings" : {
    "AvailabilityZones" : {
        "eu-west-1"     : { "Zone1" : "eu-west-1a", "Zone2" : "eu-west-1b" },
        "eu-central-1"  : { "Zone1" : "eu-central-1a", "Zone2" : "eu-central-1b" }
    },

    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "PV64"   },
      "m1.medium"   : { "Arch" : "PV64"   },
      "m1.large"    : { "Arch" : "PV64"   },
      "m1.xlarge"   : { "Arch" : "PV64"   },
      "m2.xlarge"   : { "Arch" : "PV64"   },
      "m2.2xlarge"  : { "Arch" : "PV64"   },
      "m2.4xlarge"  : { "Arch" : "PV64"   },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "PV64"   },
      "c1.xlarge"   : { "Arch" : "PV64"   },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "g2.2xlarge"  : { "Arch" : "HVMG2"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    },

    "AWSRegionNatAMI" : {
	"ap-northeast-1" : { "HVM64" :  "ami-55c29e54" },
	"ap-southeast-2" : { "HVM64" :  "ami-996402a3" },
	"eu-central-1" : { "HVM64" :  "ami-204c7a3d" },
	"eu-west-1" : { "HVM64" :  "ami-3760b040" },
	"sa-east-1" : { "HVM64" :  "ami-b972dba4" },
	"us-east-1" : { "HVM64" :  "ami-4c9e4b24" },
	"us-west-1" : { "HVM64" :  "ami-2b2b296e" },
	"us-west-2" : { "HVM64" :  "ami-bb69128b" }
    },

    "AWSRegionBastionAMI" : {
	"ap-northeast-1" : { "HVM64" :  "ami-4985b048"},
	"ap-southeast-1" : { "HVM64" :  "ami-ac5c7afe"},
	"ap-southeast-2" : { "HVM64" :  "ami-63f79559"},
	"eu-central-1" : { "HVM64" :  "ami-b43503a9"},
	"eu-west-1" : { "HVM64" :  "ami-6e7bd919"},
	"sa-east-1" : { "HVM64" :  "ami-8737829a"},
	"us-east-1" : { "HVM64" :  "ami-b66ed3de"},
	"us-west-1" : { "HVM64" :  "ami-4b6f650e"},
	"us-west-2" : { "HVM64" :  "ami-b5a7ea85"}
    },

    "AWSRegionStackatoAMI" : {
	"ap-southeast-1" :	{ "HVM64" : "ami-97ffd0c5" },
	"ap-southeast-2" :	{ "HVM64" : "ami-d53e55ef" },
	"eu-central-1" :	{ "HVM64" : "ami-74dded69" },
	"eu-west-1" :	{ "HVM64" : "ami-221ca555" },
	"us-east-1" :	{ "HVM64" : "ami-429dff2a" },
	"us-west-2" :	{ "HVM64" : "ami-9b7b2bab" }
    }
  },

  "Resources": {
    "DutchDevopsVPC": {
    "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , "-vpc" ] ] }
          }
        ]
      }
    },
    "PublicSubnetAZ1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone":   { "Fn::FindInMap" : [ "AvailabilityZones", { "Ref" : "AWS::Region" }, "Zone1" ] },
        "VpcId": {
          "Ref": "DutchDevopsVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , "-public-az-1" ] ] }
          }
        ]
      }
    },
    "PublicSubnetAZ2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone":   { "Fn::FindInMap" : [ "AvailabilityZones", { "Ref" : "AWS::Region" }, "Zone2" ] },
        "VpcId": {
          "Ref": "DutchDevopsVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , "-public-az-2" ] ] }
          }
        ]
      }
    },
    "PrivateSubnetAZ1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.3.0/24",
        "AvailabilityZone":   { "Fn::FindInMap" : [ "AvailabilityZones", { "Ref" : "AWS::Region" }, "Zone1" ] },
        "VpcId": {
          "Ref": "DutchDevopsVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , "-private-az-1" ] ] }
          }
        ]
      }
    },
    "PrivateSubnetAZ2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.4.0/24",
        "AvailabilityZone":   { "Fn::FindInMap" : [ "AvailabilityZones", { "Ref" : "AWS::Region" }, "Zone2" ] },
        "VpcId": {
          "Ref": "DutchDevopsVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , "-private-az-2" ] ] }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , "-igw" ] ] }
          }
        ]
      }
    },
    "DHPOptions": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": "eu-central-1.compute.internal",
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },
    "DutchDevopsNetworkACL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "DutchDevopsVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , "-network-acl" ] ] }
          }
        ]
      }
    },
    "rtb3a5ba853": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "DutchDevopsVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , "-public-rt" ] ] }
          }
        ]
      }
    },
    "rtb1f47b476": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "DutchDevopsVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , "-private-rt-az-2" ] ] }
          }
        ]
      }
    },
    "rtb135ba87a": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "DutchDevopsVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , "-private-rt-az-1" ] ] }
          }
        ]
      }
    },
    "StudentLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Ref": "PublicSubnetAZ1"
          },
          {
            "Ref": "PublicSubnetAZ2"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "5",
          "Target": "TCP:80",
          "Timeout": "2",
          "UnhealthyThreshold": "2"
        },
{% if options.with_test_instances %}
        "Instances": [
          {
            "Ref": "TestInstanceAZ1"
          },
          {
            "Ref": "TestInstanceAZ2"
          }
        ],
{% endif %}
        "SecurityGroups": [
          {
            "Ref": "sgstudent1loadbalancersg"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "22",
            "LoadBalancerPort": "2222",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP"
          },
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
{% if options.use_http_protocol_on_elb %}
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
{% else %}
            "Protocol": "TCP",
            "InstanceProtocol": "TCP"
{% endif %}
          },
          {
            "LoadBalancerPort": "443",
{% if options.use_http_protocol_on_elb %}
            "InstancePort": "80",
            "Protocol": "HTTPS",
            "InstanceProtocol": "HTTP"
            "SSLCertificateId": { "Ref", "SSLCertificateId" },
            "PolicyNames": [
               "ELBSecurityPolicy-2014-10"
            ]
{% else %}
            "InstancePort": "443",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP"
{% endif %}
          }
        ]
      }
    },
    "BastionEIP": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": [
        "gw1"
      ],
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "BastionHost"
        }
      }
    },
    "BastionHost": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
	"ImageId" : { "Fn::FindInMap" : [ "AWSRegionBastionAMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "BastionInstanceType" }, "Arch" ] } ] },
        "InstanceType": { "Ref" : "BastionInstanceType" },
        "KeyName": { "Ref" : "KeyName" },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , "-bastion" ] ] }
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "PublicSubnetAZ1"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.1.10",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgstudent1bastionsg"
              }
            ]
          }
        ]
      }
    },
    "NatInstanceAZ1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
	"ImageId" : { "Fn::FindInMap" : [ "AWSRegionNatAMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "NatInstanceType" }, "Arch" ] } ] },
        "InstanceType": { "Ref" : "NatInstanceType" },
        "KeyName": { "Ref" : "KeyName" },
        "Monitoring": false,
	"SourceDestCheck" : false,
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , "-nat-az-1" ] ] }
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "PublicSubnetAZ1"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.1.11",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgstudent1natsg"
              }
            ],
            "AssociatePublicIpAddress": "true"
          }
        ]
      }
    },
    "NatInstanceAZ2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
	"ImageId" : { "Fn::FindInMap" : [ "AWSRegionNatAMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "NatInstanceType" }, "Arch" ] } ] },
        "InstanceType": { "Ref" : "NatInstanceType" },
        "KeyName": { "Ref" : "KeyName" },
        "Monitoring": false,
	"SourceDestCheck" : false,
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , "-nat-az-2" ] ] }
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "PublicSubnetAZ2"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.2.11",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgstudent1natsg"
              }
            ],
            "AssociatePublicIpAddress": "true"
          }
        ]
      }
    },
{% if options.with_test_instances %}
    "TestInstanceAZ2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
	"ImageId" : { "Fn::FindInMap" : [ "AWSRegionBastionAMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "BastionInstanceType" }, "Arch" ] } ] },
        "InstanceType": { "Ref" : "BastionInstanceType" },
        "KeyName": { "Ref" : "KeyName" },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , "-dummy-az-2" ] ] }
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "PrivateSubnetAZ2"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.4.10",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgstudent1allfromall"
              }
            ]
          }
        ]
      }
    },
    "TestInstanceAZ1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
	"ImageId" : { "Fn::FindInMap" : [ "AWSRegionBastionAMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "BastionInstanceType" }, "Arch" ] } ] },
        "InstanceType": { "Ref" : "BastionInstanceType" },
        "KeyName": { "Ref" : "KeyName" },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , "-dummy-az-1" ] ] }
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "PrivateSubnetAZ1"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.3.10",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgstudent1allfromall"
              }
            ]
          }
        ]
      }
    },
{% endif %}
    "sgstudent1natsg": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , " NAT security group" ] ] },
        "VpcId": {
          "Ref": "DutchDevopsVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "10.0.0.0/8"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "10.0.0.0/8"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "sgstudent1loadbalancersg": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , " load balancer security group" ] ] },
        "VpcId": {
          "Ref": "DutchDevopsVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "sgstudent1allfromall": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , " test instance security group" ] ] },
        "VpcId": {
          "Ref": "DutchDevopsVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "sgstudent1bastionsg": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Join" : [ "", [ { "Ref" : "KeyName" } , " bastion host security group" ] ] },
        "VpcId": {
          "Ref": "DutchDevopsVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "acl1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": true,
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "104",
        "NetworkAclId": {
          "Ref": "DutchDevopsNetworkACL"
        }
      }
    },
    "acl2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "10.0.1.0/24",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "DutchDevopsNetworkACL"
        }
      }
    },
    "acl3": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "10.0.2.0/24",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "101",
        "NetworkAclId": {
          "Ref": "DutchDevopsNetworkACL"
        }
      }
    },
    "acl4": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "10.0.3.0/24",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "102",
        "NetworkAclId": {
          "Ref": "DutchDevopsNetworkACL"
        }
      }
    },
    "acl5": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "10.0.4.0/24",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "103",
        "NetworkAclId": {
          "Ref": "DutchDevopsNetworkACL"
        }
      }
    },
    "acl6": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "Protocol": "6",
        "RuleAction": "deny",
        "RuleNumber": "110",
        "PortRange": {
          "From": "0",
          "To": "65535"
        },
        "NetworkAclId": {
          "Ref": "DutchDevopsNetworkACL"
        }
      }
    },
    "acl7": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "120",
        "NetworkAclId": {
          "Ref": "DutchDevopsNetworkACL"
        }
      }
    },
    "subnetacl1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "DutchDevopsNetworkACL"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetAZ2"
        }
      }
    },
    "gw1": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "DutchDevopsVPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "subnetroute1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "rtb3a5ba853"
        },
        "SubnetId": {
          "Ref": "PublicSubnetAZ2"
        }
      }
    },
    "subnetroute2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "rtb3a5ba853"
        },
        "SubnetId": {
          "Ref": "PublicSubnetAZ1"
        }
      }
    },
    "subnetroute3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "rtb1f47b476"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetAZ2"
        }
      }
    },
    "subnetroute4": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "rtb135ba87a"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetAZ1"
        }
      }
    },
    "route1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "rtb3a5ba853"
        },
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      },
      "DependsOn": "gw1"
    },
    "route2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "rtb1f47b476"
        },
        "InstanceId": {
          "Ref": "NatInstanceAZ2"
        }
      }
    },
    "route3": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "rtb135ba87a"
        },
        "InstanceId": {
          "Ref": "NatInstanceAZ1"
        }
      }
    },
    "dchpassoc1": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "DutchDevopsVPC"
        },
        "DhcpOptionsId": {
          "Ref": "DHPOptions"
        }
      }
    },
    "ingress1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgstudent1natsg"
        },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "SourceSecurityGroupId": {
          "Ref": "sgstudent1bastionsg"
        },
        "SourceSecurityGroupOwnerId": "233211978703"
      }
    },
    "ingress2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgstudent1natsg"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "10.0.0.0/8"
      }
    },
    "ingress3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgstudent1natsg"
        },
        "IpProtocol": "tcp",
        "FromPort": "443",
        "ToPort": "443",
        "CidrIp": "10.0.0.0/8"
      }
    },
    "ingress4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgstudent1loadbalancersg"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ingress5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgstudent1loadbalancersg"
        },
        "IpProtocol": "tcp",
        "FromPort": "443",
        "ToPort": "443",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ingress6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgstudent1allfromall"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ingress7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgstudent1bastionsg"
        },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress1": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "sgstudent1natsg"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress2": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "sgstudent1loadbalancersg"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress3": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "sgstudent1allfromall"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress4": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "sgstudent1bastionsg"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "bastiondnsrecord": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": "dutchdevops.net.",
        "RecordSets": [
          {
            "Name": { "Fn::Join" : [ "", [ "bastion.", { "Ref" : "KeyName" } , ".dutchdevops.net." ] ] },
            "Type": "A",
            "TTL": "300",
            "ResourceRecords": [
              { "Ref" : "BastionEIP" }
            ]
          }
        ]
      }
    },
    "paasdnsrecord": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": "dutchdevops.net.",
        "RecordSets": [
          {
            "Name": { "Fn::Join" : [ "", [ "paas.", { "Ref" : "KeyName" } , ".dutchdevops.net." ] ] },
            "Type": "CNAME",
            "TTL": "300",
            "ResourceRecords": [
               { "Fn::GetAtt" : [ "StudentLoadBalancer" , "DNSName" ] }
            ]
          }
        ]
      }
    },
    "wildcarddnsrecord": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": "dutchdevops.net.",
        "RecordSets": [
          {
            "Name": { "Fn::Join" : [ "", [ "*.paas.", { "Ref" : "KeyName" } , ".dutchdevops.net." ] ] },
            "Type": "CNAME",
            "TTL": "300",
            "ResourceRecords": [
               { "Fn::GetAtt" : [ "StudentLoadBalancer" , "DNSName" ] }
            ]
          }
        ]
      }
    }
  },
  "Description": "Base VPC for the Dutch DevOps Engineers HA playground."
}
